{
    "uuid": "bce49c27-b934-412e-b801-5ddbf8514e65",
    "title": "集群数据库",
    "queryMocks": "clusterName=fig14",
    "schema": {
        "version": "1.0.0",
        "componentsMap": [
            {
                "package": "@alilc/antd-lowcode-materials",
                "version": "1.2.2",
                "exportName": "Icon",
                "main": "",
                "destructuring": true,
                "componentName": "Icon"
            },
            {
                "package": "@alilc/antd-lowcode-materials",
                "version": "1.2.2",
                "exportName": "Input",
                "main": "",
                "destructuring": true,
                "componentName": "Input"
            },
            {
                "package": "@alilc/antd-lowcode-materials",
                "version": "1.2.2",
                "exportName": "Button",
                "main": "",
                "destructuring": true,
                "componentName": "Button"
            },
            {
                "package": "@alilc/antd-lowcode-materials",
                "version": "1.2.2",
                "exportName": "Tooltip",
                "main": "",
                "destructuring": true,
                "componentName": "Tooltip"
            },
            {
                "package": "@alilc/antd-lowcode-materials",
                "version": "1.2.2",
                "exportName": "Divider",
                "main": "",
                "destructuring": true,
                "componentName": "Divider"
            },
            {
                "package": "@alilc/antd-lowcode-materials",
                "version": "1.2.2",
                "exportName": "Space",
                "main": "",
                "destructuring": true,
                "componentName": "Space"
            },
            {
                "package": "@alilc/antd-lowcode-materials",
                "version": "1.2.2",
                "exportName": "Typography",
                "main": "",
                "destructuring": true,
                "subName": "Text",
                "componentName": "Typography.Text"
            },
            {
                "package": "@infracreate/console-widget",
                "version": "0.1.0",
                "exportName": "Table",
                "main": "src/index.ts",
                "destructuring": true,
                "subName": "",
                "componentName": "Table"
            },
            {
                "package": "@infracreate/console-widget",
                "version": "0.1.0",
                "exportName": "Box",
                "main": "src/index.ts",
                "destructuring": true,
                "subName": "",
                "componentName": "Box"
            },
            {
                "package": "@alilc/antd-lowcode-materials",
                "version": "1.2.2",
                "exportName": "Form",
                "main": "",
                "destructuring": true,
                "subName": "Item",
                "componentName": "Form.Item"
            },
            {
                "package": "@alilc/antd-lowcode-materials",
                "version": "1.2.2",
                "exportName": "Form",
                "main": "",
                "destructuring": true,
                "componentName": "Form"
            },
            {
                "package": "@alilc/antd-lowcode-materials",
                "version": "1.2.2",
                "exportName": "Modal",
                "main": "",
                "destructuring": true,
                "componentName": "Modal"
            },
            {
                "package": "@infracreate/console-widget",
                "version": "0.1.0",
                "exportName": "Block",
                "main": "src/index.ts",
                "destructuring": true,
                "subName": "",
                "componentName": "Block"
            },
            {
                "devMode": "lowCode",
                "componentName": "Page"
            }
        ],
        "componentsTree": [
            {
                "componentName": "Page",
                "id": "bce49c27-b934-412e-b801-5ddbf8514e65",
                "props": {},
                "title": "",
                "isLocked": false,
                "condition": true,
                "conditionGroup": "",
                "originCode": "class Page extends Component {\n  state = {\n    listLoading: false,\n    pagination: ['none'],\n    creating: false,\n    acting: false,\n\n    databases: [],\n    searchKey: ''\n  }\n\n  onSearch(event) {\n    this.setState({\n      searchKey: event.target.value\n    })\n  }\n\n  getPagination(l) {\n    return l > this.PAGESIZE ? ['bottomRight'] : ['none'];\n  }\n\n  sorter() {\n    const args = Array.from(arguments);\n    return this.utils.sorter(...arguments);\n  }\n\n  exitForm() {\n    this.setState({\n      creating: false\n    })\n  }\n\n  newForm() {\n    this.setState({\n      creating: true\n    })\n  }\n\n  async createDatabase(){\n    const { dbName } = await this.$('form_new_database').validateFields();\n    if (dbName){\n      const body = {name:dbName};\n      this.setState({acting:true});\n      await this.dataSourceMap.createDatabase.load({body});\n      this.setState({ acting: false });\n      this.getDatabases();\n      this.exitForm();\n    }\n  }\n\n  deleteDatabase(event, option) {\n    const { databaseName } = option;\n    if (!databaseName){return}\n    this.utils.modal.confirm({\n      title: this.i18n('delete.confirm'),\n      content: databaseName,\n      loading: this.state.deleting,\n      okButtonProps: {\n        danger: true,\n      },\n      onOk: async () => {\n        this.setState({ deleting: true });\n        await this.dataSourceMap.deleteDatabase.load({databaseName});\n        this.setState({ deleting: false });\n        this.getDatabases();\n      }\n    });\n  }\n\n  async getCluster() {\n    const data = await this.dataSourceMap.getCluster.load();\n    let notSupport = false;\n    if (data.engine === 'oceanbase' && data.extraInfo?.tenant?.mode !== 'mysql') {\n      notSupport = true;\n    }\n    if (!notSupport) {\n      this.getDatabases();\n    }\n    this.setState({ notSupport });\n  }\n\n  async getDatabases() {\n    this.setState({ listLoading: true });\n    const { items } = await this.dataSourceMap.listDatabases.load();\n    console.log(items);\n    const pagination = this.getPagination(items.length);\n    this.setState({\n      databases: items,\n      pagination,\n      listLoading: false,\n    })\n  }\n\n  componentDidMount() {\n    this.PAGESIZE = 10;\n    this.getCluster();\n  }\n\n}",
                "css": "",
                "dataSource": {
                    "list": [
                        {
                            "dataHandler": {
                                "type": "JSFunction",
                                "value": "(response) => {\n  return response;\n}"
                            },
                            "errorHandler": {
                                "type": "JSFunction",
                                "value": "(err) => {\n\n}"
                            },
                            "shouldFetch": {
                                "type": "JSFunction",
                                "value": "() => {\n  return true;\n}"
                            },
                            "willFetch": {
                                "type": "JSFunction",
                                "value": "(options) => {\n  return options;\n}"
                            },
                            "options": {
                                "params": {
                                    "orgName": {
                                        "type": "JSExpression",
                                        "value": "this.utils.user.organization.name"
                                    },
                                    "clusterName": {
                                        "type": "JSExpression",
                                        "value": "this.utils.params.clusterName"
                                    }
                                },
                                "headers": {
                                    "x-data-store": "cloud"
                                },
                                "method": "get",
                                "isCors": true,
                                "uri": "/api/v1/organizations/{orgName}/clusters/{clusterName}"
                            },
                            "id": "getCluster",
                            "type": "fetch",
                            "isInit": false
                        },
                        {
                            "dataHandler": {
                                "type": "JSFunction",
                                "value": "(response) => {\n  return response;\n}"
                            },
                            "errorHandler": {
                                "type": "JSFunction",
                                "value": "(err) => {\n\n}"
                            },
                            "shouldFetch": {
                                "type": "JSFunction",
                                "value": "() => {\n  return true;\n}"
                            },
                            "willFetch": {
                                "type": "JSFunction",
                                "value": "(options) => {\n  return options;\n}"
                            },
                            "options": {
                                "params": {
                                    "orgName": {
                                        "type": "JSExpression",
                                        "value": "this.utils.user.organization.name"
                                    },
                                    "clusterName": {
                                        "type": "JSExpression",
                                        "value": "this.utils.params.clusterName"
                                    },
                                    "databaseName": "1"
                                },
                                "headers": {
                                    "x-data-store": "cloud"
                                },
                                "method": "delete",
                                "isCors": true,
                                "uri": "/api/v1/organizations/{orgName}/clusters/{clusterName}/databases/{databaseName}"
                            },
                            "id": "deleteDatabase",
                            "type": "fetch",
                            "isInit": false
                        },
                        {
                            "dataHandler": {
                                "type": "JSFunction",
                                "value": "(response) => {\n  return response;\n}"
                            },
                            "errorHandler": {
                                "type": "JSFunction",
                                "value": "(err) => {\n\n}"
                            },
                            "shouldFetch": {
                                "type": "JSFunction",
                                "value": "() => {\n  return true;\n}"
                            },
                            "willFetch": {
                                "type": "JSFunction",
                                "value": "(options) => {\n  return options;\n}"
                            },
                            "options": {
                                "params": {
                                    "orgName": {
                                        "type": "JSExpression",
                                        "value": "this.utils.user.organization.name"
                                    },
                                    "clusterName": {
                                        "type": "JSExpression",
                                        "value": "this.utils.params.clusterName"
                                    },
                                    "body": "body"
                                },
                                "headers": {
                                    "x-data-store": "cloud"
                                },
                                "method": "post",
                                "isCors": true,
                                "uri": "/api/v1/organizations/{orgName}/clusters/{clusterName}/databases"
                            },
                            "id": "createDatabase",
                            "type": "fetch",
                            "isInit": false
                        },
                        {
                            "dataHandler": {
                                "type": "JSFunction",
                                "value": "(response) => {\n  return response;\n}"
                            },
                            "errorHandler": {
                                "type": "JSFunction",
                                "value": "(err) => {\n\n}"
                            },
                            "shouldFetch": {
                                "type": "JSFunction",
                                "value": "() => {\n  return true;\n}"
                            },
                            "willFetch": {
                                "type": "JSFunction",
                                "value": "(options) => {\n  return options;\n}"
                            },
                            "options": {
                                "params": {
                                    "orgName": {
                                        "type": "JSExpression",
                                        "value": "this.utils.user.organization.name"
                                    },
                                    "clusterName": {
                                        "type": "JSExpression",
                                        "value": "this.utils.params.clusterName"
                                    }
                                },
                                "headers": {
                                    "x-data-store": "cloud"
                                },
                                "method": "get",
                                "isCors": true,
                                "uri": "/api/v1/organizations/{orgName}/clusters/{clusterName}/databases"
                            },
                            "id": "listDatabases",
                            "type": "fetch",
                            "isInit": false
                        },
                        {
                            "dataHandler": {
                                "type": "JSFunction",
                                "value": "(response) => {\n  return response;\n}"
                            },
                            "errorHandler": {
                                "type": "JSFunction",
                                "value": "(err) => {\n\n}"
                            },
                            "shouldFetch": {
                                "type": "JSFunction",
                                "value": "() => {\n  return true;\n}"
                            },
                            "willFetch": {
                                "type": "JSFunction",
                                "value": "(options) => {\n  return options;\n}"
                            },
                            "options": {
                                "params": {
                                    "orgName": {
                                        "type": "JSExpression",
                                        "value": "this.utils.user.organization.name"
                                    },
                                    "clusterName": {
                                        "type": "JSExpression",
                                        "value": "this.utils.params.clusterName"
                                    }
                                },
                                "headers": {
                                    "x-data-store": "cloud"
                                },
                                "method": "post",
                                "isCors": true,
                                "uri": "/api/v1/organizations/{orgName}/clusters/{clusterName}/runSQL"
                            },
                            "id": "runSQLOnCluster",
                            "type": "fetch",
                            "isInit": false
                        }
                    ]
                },
                "state": {
                    "listLoading": {
                        "type": "JSExpression",
                        "value": "false"
                    },
                    "pagination": {
                        "type": "JSExpression",
                        "value": "['none']"
                    },
                    "creating": {
                        "type": "JSExpression",
                        "value": "false"
                    },
                    "acting": {
                        "type": "JSExpression",
                        "value": "false"
                    },
                    "databases": {
                        "type": "JSExpression",
                        "value": "[]"
                    },
                    "searchKey": {
                        "type": "JSExpression",
                        "value": "''"
                    }
                },
                "methods": {
                    "onSearch": {
                        "type": "JSFunction",
                        "value": "function onSearch(event) {\n  this.setState({\n    searchKey: event.target.value\n  });\n}",
                        "source": "function onSearch(event) {\n  this.setState({\n    searchKey: event.target.value\n  });\n}"
                    },
                    "getPagination": {
                        "type": "JSFunction",
                        "value": "function getPagination(l) {\n  return l > this.PAGESIZE ? ['bottomRight'] : ['none'];\n}",
                        "source": "function getPagination(l) {\n  return l > this.PAGESIZE ? ['bottomRight'] : ['none'];\n}"
                    },
                    "sorter": {
                        "type": "JSFunction",
                        "value": "function sorter() {\n  const args = Array.from(arguments);\n  return this.utils.sorter(...arguments);\n}",
                        "source": "function sorter() {\n  const args = Array.from(arguments);\n  return this.utils.sorter(...arguments);\n}"
                    },
                    "exitForm": {
                        "type": "JSFunction",
                        "value": "function exitForm() {\n  this.setState({\n    creating: false\n  });\n}",
                        "source": "function exitForm() {\n  this.setState({\n    creating: false\n  });\n}"
                    },
                    "newForm": {
                        "type": "JSFunction",
                        "value": "function newForm() {\n  this.setState({\n    creating: true\n  });\n}",
                        "source": "function newForm() {\n  this.setState({\n    creating: true\n  });\n}"
                    },
                    "createDatabase": {
                        "type": "JSFunction",
                        "value": "async function createDatabase() {\n  const {\n    dbName\n  } = await this.$('form_new_database').validateFields();\n  if (dbName) {\n    const body = {\n      name: dbName\n    };\n    this.setState({\n      acting: true\n    });\n    await this.dataSourceMap.createDatabase.load({\n      body\n    });\n    this.setState({\n      acting: false\n    });\n    this.getDatabases();\n    this.exitForm();\n  }\n}",
                        "source": "async function createDatabase() {\n  const {\n    dbName\n  } = await this.$('form_new_database').validateFields();\n  if (dbName) {\n    const body = {\n      name: dbName\n    };\n    this.setState({\n      acting: true\n    });\n    await this.dataSourceMap.createDatabase.load({\n      body\n    });\n    this.setState({\n      acting: false\n    });\n    this.getDatabases();\n    this.exitForm();\n  }\n}"
                    },
                    "deleteDatabase": {
                        "type": "JSFunction",
                        "value": "function deleteDatabase(event, option) {\n  const {\n    databaseName\n  } = option;\n  if (!databaseName) {\n    return;\n  }\n  this.utils.modal.confirm({\n    title: this.i18n('delete.confirm'),\n    content: databaseName,\n    loading: this.state.deleting,\n    okButtonProps: {\n      danger: true\n    },\n    onOk: async () => {\n      this.setState({\n        deleting: true\n      });\n      await this.dataSourceMap.deleteDatabase.load({\n        databaseName\n      });\n      this.setState({\n        deleting: false\n      });\n      this.getDatabases();\n    }\n  });\n}",
                        "source": "function deleteDatabase(event, option) {\n  const {\n    databaseName\n  } = option;\n  if (!databaseName) {\n    return;\n  }\n  this.utils.modal.confirm({\n    title: this.i18n('delete.confirm'),\n    content: databaseName,\n    loading: this.state.deleting,\n    okButtonProps: {\n      danger: true\n    },\n    onOk: async () => {\n      this.setState({\n        deleting: true\n      });\n      await this.dataSourceMap.deleteDatabase.load({\n        databaseName\n      });\n      this.setState({\n        deleting: false\n      });\n      this.getDatabases();\n    }\n  });\n}"
                    },
                    "getCluster": {
                        "type": "JSFunction",
                        "value": "async function getCluster() {\n  var _data$extraInfo;\n  const data = await this.dataSourceMap.getCluster.load();\n  let notSupport = false;\n  if (data.engine === 'oceanbase' && ((_data$extraInfo = data.extraInfo) === null || _data$extraInfo === void 0 || (_data$extraInfo = _data$extraInfo.tenant) === null || _data$extraInfo === void 0 ? void 0 : _data$extraInfo.mode) !== 'mysql') {\n    notSupport = true;\n  }\n  if (!notSupport) {\n    this.getDatabases();\n  }\n  this.setState({\n    notSupport\n  });\n}",
                        "source": "async function getCluster() {\n  const data = await this.dataSourceMap.getCluster.load();\n  let notSupport = false;\n  if (data.engine === 'oceanbase' && data.extraInfo?.tenant?.mode !== 'mysql') {\n    notSupport = true;\n  }\n  if (!notSupport) {\n    this.getDatabases();\n  }\n  this.setState({\n    notSupport\n  });\n}"
                    },
                    "getDatabases": {
                        "type": "JSFunction",
                        "value": "async function getDatabases() {\n  this.setState({\n    listLoading: true\n  });\n  const {\n    items\n  } = await this.dataSourceMap.listDatabases.load();\n  console.log(items);\n  const pagination = this.getPagination(items.length);\n  this.setState({\n    databases: items,\n    pagination,\n    listLoading: false\n  });\n}",
                        "source": "async function getDatabases() {\n  this.setState({\n    listLoading: true\n  });\n  const {\n    items\n  } = await this.dataSourceMap.listDatabases.load();\n  console.log(items);\n  const pagination = this.getPagination(items.length);\n  this.setState({\n    databases: items,\n    pagination,\n    listLoading: false\n  });\n}"
                    }
                },
                "lifeCycles": {
                    "componentDidMount": {
                        "type": "JSFunction",
                        "value": "function componentDidMount() {\n  this.PAGESIZE = 10;\n  this.getCluster();\n}",
                        "source": "function componentDidMount() {\n  this.PAGESIZE = 10;\n  this.getCluster();\n}"
                    }
                },
                "children": [
                    {
                        "componentName": "Box",
                        "id": "node_oclvdiikc01",
                        "props": {
                            "id": "box-405d7f634351",
                            "padding": "",
                            "margin": "",
                            "twinkle": false,
                            "bordered": false,
                            "hoverable": false,
                            "loading": false,
                            "ref": "box-e8a5ecfb",
                            "_unsafe_MixedSetter____condition____select": "VariableSetter"
                        },
                        "title": "",
                        "isLocked": false,
                        "condition": {
                            "type": "JSExpression",
                            "value": "!this.state.notSupport"
                        },
                        "conditionGroup": "",
                        "loopArgs": [
                            "",
                            ""
                        ],
                        "children": [
                            {
                                "componentName": "Space",
                                "id": "node_oclrrjin341",
                                "props": {
                                    "align": "start",
                                    "direction": "horizontal",
                                    "wrap": false,
                                    "style": {
                                        "display": "flex",
                                        "justifyContent": "space-between"
                                    },
                                    "ref": "space-5f873547"
                                },
                                "title": "",
                                "isLocked": false,
                                "condition": true,
                                "conditionGroup": "",
                                "loopArgs": [
                                    "",
                                    ""
                                ],
                                "children": [
                                    {
                                        "componentName": "Input",
                                        "id": "node_ocls1ep1bcf",
                                        "props": {
                                            "placeholder": {
                                                "type": "JSExpression",
                                                "value": "this.i18n('search')",
                                                "mock": "Search"
                                            },
                                            "bordered": true,
                                            "disabled": false,
                                            "__events": {
                                                "eventDataList": [
                                                    {
                                                        "type": "componentEvent",
                                                        "name": "onChange",
                                                        "relatedEventName": "onSearch"
                                                    }
                                                ],
                                                "eventList": [
                                                    {
                                                        "name": "onChange",
                                                        "template": "onChange(event,${extParams}){\n// 输入框内容变化时的回调\nconsole.log('onChange',event);}",
                                                        "disabled": true
                                                    },
                                                    {
                                                        "name": "onPressEnter",
                                                        "template": "onPressEnter(event,${extParams}){\n// 按下回车的回调\nconsole.log('onPressEnter',event);}",
                                                        "disabled": false
                                                    },
                                                    {
                                                        "name": "onFocus",
                                                        "template": "onFocus(event,${extParams}){\n// 获取焦点回调\nconsole.log('onFocus',event);}",
                                                        "disabled": false
                                                    },
                                                    {
                                                        "name": "onKeyDown",
                                                        "template": "onKeyDown(event,${extParams}){\n// 按键按下时的回调\nconsole.log('onKeyDown',event);}",
                                                        "disabled": false
                                                    },
                                                    {
                                                        "name": "onKeyPress",
                                                        "template": "onKeyPress(event,${extParams}){\n// 按键按下后的回调\nconsole.log('onKeyPress',event);}",
                                                        "disabled": false
                                                    },
                                                    {
                                                        "name": "onKeyUp",
                                                        "template": "onKeyUp(event,${extParams}){\n// 按键释放回调\nconsole.log('onKeyUp',event);}",
                                                        "disabled": false
                                                    },
                                                    {
                                                        "name": "onBlur",
                                                        "template": "onBlur(event,${extParams}){\n// 按键释放回调\nconsole.log('onBlur',event);}",
                                                        "disabled": false
                                                    }
                                                ]
                                            },
                                            "onChange": {
                                                "type": "JSFunction",
                                                "value": "function(){return this.onSearch.apply(this,Array.prototype.slice.call(arguments).concat([])) }"
                                            },
                                            "addonBefore": "",
                                            "prefix": {
                                                "type": "JSSlot",
                                                "value": [
                                                    {
                                                        "componentName": "Icon",
                                                        "id": "node_ocls1eyum75",
                                                        "props": {
                                                            "type": "SearchOutlined",
                                                            "size": 16,
                                                            "rotate": 0,
                                                            "spin": false,
                                                            "style": {
                                                                "opacity": 0.4
                                                            }
                                                        },
                                                        "title": "",
                                                        "isLocked": false,
                                                        "condition": true,
                                                        "conditionGroup": ""
                                                    }
                                                ],
                                                "id": "node_ocls1eyum74"
                                            },
                                            "style": {
                                                "width": "300px"
                                            },
                                            "_unsafe_MixedSetter_addonAfter_select": "StringSetter",
                                            "_unsafe_MixedSetter_addonBefore_select": "SlotSetter",
                                            "_unsafe_MixedSetter_prefix_select": "SlotSetter"
                                        },
                                        "title": "",
                                        "isLocked": false,
                                        "condition": true,
                                        "conditionGroup": ""
                                    },
                                    {
                                        "componentName": "Space",
                                        "id": "node_ocls1ep1bc1",
                                        "props": {
                                            "align": "start",
                                            "direction": "horizontal",
                                            "wrap": false,
                                            "split": {
                                                "type": "JSSlot",
                                                "value": [
                                                    {
                                                        "componentName": "Divider",
                                                        "id": "node_ocls1eypwq2",
                                                        "props": {
                                                            "dashed": false,
                                                            "orientation": "left",
                                                            "type": "vertical",
                                                            "plain": false
                                                        },
                                                        "title": "",
                                                        "isLocked": false,
                                                        "condition": true,
                                                        "conditionGroup": ""
                                                    }
                                                ],
                                                "id": "node_ocls1eypwq1"
                                            },
                                            "style": {
                                                "display": "flex",
                                                "alignItems": "center"
                                            }
                                        },
                                        "title": "",
                                        "isLocked": false,
                                        "condition": true,
                                        "conditionGroup": "",
                                        "children": [
                                            {
                                                "componentName": "Tooltip",
                                                "id": "node_oclty3i0172",
                                                "props": {
                                                    "title": {
                                                        "type": "JSExpression",
                                                        "value": "this.i18n('nopermission')"
                                                    },
                                                    "defaultOpen": false,
                                                    "autoAdjustOverflow": true,
                                                    "arrowPointAtCenter": false,
                                                    "ref": "tooltip-0478540a",
                                                    "_unsafe_MixedSetter____condition____select": "BoolSetter",
                                                    "_unsafe_MixedSetter_title_select": "VariableSetter",
                                                    "trigger": "hover",
                                                    "mouseEnterDelay": {
                                                        "type": "JSExpression",
                                                        "value": "!this.utils.hasPermission(\"cluster.write\") ? 0 : 1*60*60"
                                                    }
                                                },
                                                "title": "",
                                                "isLocked": false,
                                                "condition": true,
                                                "conditionGroup": "",
                                                "loopArgs": [
                                                    "",
                                                    ""
                                                ],
                                                "children": [
                                                    {
                                                        "componentName": "Button",
                                                        "id": "node_oclrrjin342",
                                                        "props": {
                                                            "children": {
                                                                "type": "JSExpression",
                                                                "value": "this.i18n('new')"
                                                            },
                                                            "htmlType": "button",
                                                            "type": "primary",
                                                            "size": "middle",
                                                            "shape": "default",
                                                            "icon": "",
                                                            "block": false,
                                                            "danger": false,
                                                            "ghost": false,
                                                            "disabled": {
                                                                "type": "JSExpression",
                                                                "value": "!this.utils.hasPermission(\"cluster.write\")",
                                                                "mock": false
                                                            },
                                                            "style": {},
                                                            "_unsafe_MixedSetter_children_select": "VariableSetter",
                                                            "__events": {
                                                                "eventDataList": [
                                                                    {
                                                                        "type": "componentEvent",
                                                                        "name": "onClick",
                                                                        "relatedEventName": "newForm"
                                                                    }
                                                                ],
                                                                "eventList": [
                                                                    {
                                                                        "name": "onClick",
                                                                        "template": "onClick(event,${extParams}){\n// 点击按钮时的回调\nconsole.log('onClick', event);}",
                                                                        "disabled": true
                                                                    }
                                                                ]
                                                            },
                                                            "onClick": {
                                                                "type": "JSFunction",
                                                                "value": "function(){return this.newForm.apply(this,Array.prototype.slice.call(arguments).concat([])) }"
                                                            },
                                                            "ref": "button-568e6d90",
                                                            "_unsafe_MixedSetter____condition____select": "BoolSetter"
                                                        },
                                                        "title": "",
                                                        "isLocked": false,
                                                        "condition": true,
                                                        "conditionGroup": "",
                                                        "loopArgs": [
                                                            "",
                                                            ""
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "componentName": "Table",
                                "id": "node_oclrrjola3v",
                                "props": {
                                    "dataSource": {
                                        "type": "JSExpression",
                                        "value": "this.state.databases?.filter(item => {\n  return _.isEmpty(this.state.searchKey) || item.name?.match(new RegExp(this.state.searchKey, 'i'))\n})",
                                        "mock": [
                                            {
                                                "id": "1",
                                                "name": "胡彦斌",
                                                "age": 32,
                                                "address": "西湖区湖底公园1号"
                                            },
                                            {
                                                "id": "2",
                                                "name": "王一博",
                                                "age": 28,
                                                "address": "滨江区网商路699号"
                                            }
                                        ]
                                    },
                                    "columns": [
                                        {
                                            "dataIndex": "name",
                                            "key": "name",
                                            "align": "left",
                                            "fixed": "",
                                            "title": {
                                                "type": "JSExpression",
                                                "value": "this.i18n('name')"
                                            },
                                            "_unsafe_MixedSetter_title_select": "VariableSetter"
                                        },
                                        {
                                            "dataIndex": "status",
                                            "key": "",
                                            "align": "left",
                                            "fixed": "",
                                            "title": {
                                                "type": "JSExpression",
                                                "value": "this.i18n('status')"
                                            },
                                            "_unsafe_MixedSetter_title_select": "VariableSetter",
                                            "render": {
                                                "type": "JSSlot",
                                                "params": [
                                                    "text",
                                                    "record",
                                                    "index"
                                                ],
                                                "value": [
                                                    {
                                                        "componentName": "Typography.Text",
                                                        "id": "node_ocls18avqq1",
                                                        "props": {
                                                            "children": "Running",
                                                            "code": false,
                                                            "delete": false,
                                                            "disabled": false,
                                                            "mark": false,
                                                            "keyboard": false,
                                                            "underline": false,
                                                            "strong": false,
                                                            "style": {
                                                                "type": "JSExpression",
                                                                "value": "{\n  color:this.utils.colors.green.primary\n}"
                                                            }
                                                        },
                                                        "title": "",
                                                        "isLocked": false,
                                                        "condition": true,
                                                        "conditionGroup": ""
                                                    }
                                                ],
                                                "id": "node_ocls17zf184"
                                            }
                                        },
                                        {
                                            "dataIndex": "",
                                            "align": "left",
                                            "fixed": "",
                                            "render": {
                                                "type": "JSSlot",
                                                "params": [
                                                    "text",
                                                    "record",
                                                    "index"
                                                ],
                                                "value": [
                                                    {
                                                        "componentName": "Tooltip",
                                                        "id": "node_oclty3i2yv1",
                                                        "props": {
                                                            "title": {
                                                                "type": "JSExpression",
                                                                "value": "this.i18n('nopermission')"
                                                            },
                                                            "defaultOpen": false,
                                                            "autoAdjustOverflow": true,
                                                            "arrowPointAtCenter": false,
                                                            "ref": "tooltip-8e2wdgk",
                                                            "_unsafe_MixedSetter____condition____select": "BoolSetter",
                                                            "_unsafe_MixedSetter_title_select": "VariableSetter",
                                                            "trigger": "hover",
                                                            "mouseEnterDelay": {
                                                                "type": "JSExpression",
                                                                "value": "!this.utils.hasPermission(\"cluster.write\") ? 0 : 1*60*60"
                                                            }
                                                        },
                                                        "title": "",
                                                        "isLocked": false,
                                                        "condition": true,
                                                        "conditionGroup": "",
                                                        "loopArgs": [
                                                            "",
                                                            ""
                                                        ],
                                                        "children": [
                                                            {
                                                                "componentName": "Button",
                                                                "id": "node_ocls17zf183",
                                                                "props": {
                                                                    "type": "link",
                                                                    "children": {
                                                                        "type": "JSExpression",
                                                                        "value": "this.i18n('delete')"
                                                                    },
                                                                    "htmlType": "button",
                                                                    "size": "middle",
                                                                    "shape": "default",
                                                                    "block": false,
                                                                    "danger": false,
                                                                    "ghost": false,
                                                                    "disabled": {
                                                                        "type": "JSExpression",
                                                                        "value": "!this.utils.hasPermission(\"cluster.write\")",
                                                                        "mock": false
                                                                    },
                                                                    "icon": "",
                                                                    "_unsafe_MixedSetter_children_select": "VariableSetter",
                                                                    "__events": {
                                                                        "eventDataList": [
                                                                            {
                                                                                "type": "componentEvent",
                                                                                "name": "onClick",
                                                                                "relatedEventName": "deleteDatabase",
                                                                                "paramStr": "{\n \t \"databaseName\": this.record.name\n}"
                                                                            }
                                                                        ],
                                                                        "eventList": [
                                                                            {
                                                                                "name": "onClick",
                                                                                "template": "onClick(event,${extParams}){\n// 点击按钮时的回调\nconsole.log('onClick', event);}",
                                                                                "disabled": true
                                                                            }
                                                                        ]
                                                                    },
                                                                    "onClick": {
                                                                        "type": "JSFunction",
                                                                        "value": "function(){return this.deleteDatabase.apply(this,Array.prototype.slice.call(arguments).concat([{\n \t \"databaseName\": this.record.name\n}])) }"
                                                                    },
                                                                    "ref": "button-1f014afe",
                                                                    "_unsafe_MixedSetter____condition____select": "BoolSetter"
                                                                },
                                                                "title": "",
                                                                "isLocked": false,
                                                                "condition": true,
                                                                "conditionGroup": "",
                                                                "loopArgs": [
                                                                    "",
                                                                    ""
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "id": "node_ocls17zf181"
                                            },
                                            "title": {
                                                "type": "JSExpression",
                                                "value": "this.i18n('action')"
                                            },
                                            "_unsafe_MixedSetter_title_select": "VariableSetter",
                                            "width": 200
                                        }
                                    ],
                                    "rowKey": "id",
                                    "pagination": {
                                        "pageSize": 10,
                                        "current": 1,
                                        "position": {
                                            "type": "JSExpression",
                                            "value": "this.state.pagination"
                                        }
                                    },
                                    "loading": {
                                        "type": "JSExpression",
                                        "value": "this.state.listLoading",
                                        "mock": false
                                    },
                                    "showHeader": true,
                                    "size": "default",
                                    "tableLayout": "fixed",
                                    "scroll": {
                                        "scrollToFirstRowOnChange": true
                                    },
                                    "style": {
                                        "marginTop": "16px"
                                    },
                                    "_unsafe_MixedSetter_pagination": {
                                        "position_select": "ExpressionSetter"
                                    },
                                    "ref": "table-c249173a",
                                    "bordered": true
                                },
                                "title": "",
                                "isLocked": false,
                                "condition": true,
                                "conditionGroup": "",
                                "loopArgs": [
                                    "",
                                    ""
                                ]
                            }
                        ]
                    },
                    {
                        "componentName": "Modal",
                        "id": "node_oclrrkz97d1",
                        "props": {
                            "title": {
                                "type": "JSExpression",
                                "value": "this.i18n('new')"
                            },
                            "okText": {
                                "type": "JSExpression",
                                "value": "this.i18n('create')"
                            },
                            "cancelText": {
                                "type": "JSExpression",
                                "value": "this.i18n('cancel')"
                            },
                            "open": {
                                "type": "JSExpression",
                                "value": "this.state.creating",
                                "mock": true
                            },
                            "destroyOnClose": true,
                            "centered": false,
                            "closable": true,
                            "confirmLoading": {
                                "type": "JSExpression",
                                "value": "this.state.acting",
                                "mock": false
                            },
                            "forceRender": false,
                            "keyboard": true,
                            "mask": true,
                            "maskClosable": true,
                            "bodyStyle": {},
                            "maskStyle": {},
                            "_unsafe_MixedSetter_title_select": "VariableSetter",
                            "__events": {
                                "eventDataList": [
                                    {
                                        "type": "componentEvent",
                                        "name": "onCancel",
                                        "relatedEventName": "exitForm"
                                    },
                                    {
                                        "type": "componentEvent",
                                        "name": "onOk",
                                        "relatedEventName": "createDatabase"
                                    }
                                ],
                                "eventList": [
                                    {
                                        "name": "afterClose",
                                        "templete": "onCancel(${extParams}){\n// 完全关闭后的回调\nconsole.log('afterClose');}",
                                        "disabled": false
                                    },
                                    {
                                        "name": "onCancel",
                                        "template": "onCancel(${extParams}){\n// 点击遮罩层或右上角叉或取消按钮的回调\nconsole.log('onCancel');}",
                                        "disabled": true
                                    },
                                    {
                                        "name": "onOk",
                                        "template": "onOk(${extParams}){\n// 点击确定回调\nconsole.log('onOk');}",
                                        "disabled": true
                                    }
                                ]
                            },
                            "onCancel": {
                                "type": "JSFunction",
                                "value": "function(){return this.exitForm.apply(this,Array.prototype.slice.call(arguments).concat([])) }"
                            },
                            "style": {},
                            "_unsafe_MixedSetter_okText_select": "VariableSetter",
                            "_unsafe_MixedSetter_cancelText_select": "VariableSetter",
                            "onOk": {
                                "type": "JSFunction",
                                "value": "function(){return this.createDatabase.apply(this,Array.prototype.slice.call(arguments).concat([])) }"
                            }
                        },
                        "title": "",
                        "isLocked": false,
                        "condition": true,
                        "conditionGroup": "",
                        "children": [
                            {
                                "componentName": "Form",
                                "id": "node_oclrrm0gvr1",
                                "props": {
                                    "labelCol": {
                                        "span": 6
                                    },
                                    "wrapperCol": {
                                        "span": 14
                                    },
                                    "onValuesChange": {
                                        "type": "JSExpression",
                                        "value": "function() {\n      const self = this;\n      try {\n        return (function onValuesChange(changedValues, allValues) {\n  console.log('onValuesChange', changedValues, allValues);\n}).apply(self, arguments);\n      } catch(e) {\n        console.warn('call function which parsed by lowcode failed: ', e);\n        return e.message;\n      }\n    }"
                                    },
                                    "onFinish": {
                                        "type": "JSExpression",
                                        "value": "function() {\n      const self = this;\n      try {\n        return (function onFinish(values) {\n  console.log('onFinish', values);\n}).apply(self, arguments);\n      } catch(e) {\n        console.warn('call function which parsed by lowcode failed: ', e);\n        return e.message;\n      }\n    }"
                                    },
                                    "onFinishFailed": {
                                        "type": "JSExpression",
                                        "value": "function() {\n      const self = this;\n      try {\n        return (function onFinishFailed({ values, errorFields, outOfDate }) {\n  console.log('onFinishFailed', values, errorFields, outOfDate);\n}).apply(self, arguments);\n      } catch(e) {\n        console.warn('call function which parsed by lowcode failed: ', e);\n        return e.message;\n      }\n    }"
                                    },
                                    "name": "basic",
                                    "ref": "form_new_database",
                                    "colon": true,
                                    "hideRequiredMark": false,
                                    "preserve": true,
                                    "scrollToFirstError": true,
                                    "validateMessages": {
                                        "required": "'${name}' 不能为空"
                                    }
                                },
                                "title": "",
                                "isLocked": false,
                                "condition": true,
                                "conditionGroup": "",
                                "children": [
                                    {
                                        "componentName": "Form.Item",
                                        "id": "node_oclrrl5s5g1",
                                        "props": {
                                            "label": {
                                                "type": "JSExpression",
                                                "value": "this.i18n('name')"
                                            },
                                            "colon": false,
                                            "required": true,
                                            "noStyle": false,
                                            "valuePropName": "value",
                                            "labelCol": {
                                                "span": 24
                                            },
                                            "wrapperCol": {
                                                "span": 24
                                            },
                                            "requiredobj": {
                                                "required": true,
                                                "message": ""
                                            },
                                            "typeobj": {
                                                "message": ""
                                            },
                                            "lenobj": {
                                                "max": 64,
                                                "min": 1,
                                                "message": ""
                                            },
                                            "patternobj": {
                                                "pattern": "^[a-z][a-z0-9_]*[a-z0-9]$",
                                                "message": {
                                                    "type": "JSExpression",
                                                    "value": "this.i18n('tips')",
                                                    "mock": ""
                                                }
                                            },
                                            "_unsafe_MixedSetter_label_select": "VariableSetter",
                                            "name": "dbName",
                                            "style": {}
                                        },
                                        "title": "",
                                        "isLocked": false,
                                        "condition": true,
                                        "conditionGroup": "",
                                        "children": [
                                            {
                                                "componentName": "Input",
                                                "id": "node_oclrrl5s5g5",
                                                "props": {
                                                    "placeholder": "",
                                                    "bordered": true,
                                                    "disabled": false,
                                                    "maxLength": 64
                                                },
                                                "title": "",
                                                "isLocked": false,
                                                "condition": true,
                                                "conditionGroup": ""
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "componentName": "Block",
                        "id": "node_oclwzuchws1",
                        "props": {
                            "uuid": "c3f930a5-a084-4258-86be-6d1e2dd85ce8",
                            "_unsafe_MixedSetter____condition____select": "VariableSetter"
                        },
                        "title": "",
                        "isLocked": false,
                        "condition": {
                            "type": "JSExpression",
                            "value": "this.state.notSupport"
                        },
                        "conditionGroup": "",
                        "loopArgs": [
                            "",
                            ""
                        ]
                    }
                ]
            }
        ],
        "i18n": {
            "zh-CN": {
                "new": "创建数据库",
                "name": "数据库名称",
                "status": "数据库状态",
                "charset": "字符集",
                "account": "授权账号",
                "notes": "备注说明",
                "action": "操作",
                "delete": "删除",
                "account.new": "创建新账号",
                "tips": "以小写字母开头，小写字母或数字结尾，只能包含小写字母、数字、下划线。",
                "create": "创建",
                "cancel": "取消",
                "delete.confirm": "确认要删除该数据库吗？",
                "sql": "SQL查询",
                "search": "搜索数据库",
                "nopermission": "没有权限",
                "notSupport": "暂不支持"
            },
            "en-US": {
                "new": "Create Database",
                "name": "Name",
                "status": "Status",
                "charset": "Charset",
                "account": "Accounts",
                "notes": "Notes",
                "action": "Action",
                "delete": "Delete",
                "account.new": "Create New Account",
                "tips": "The string must begin with a lowercase letter and end with either a lowercase letter or a number. It can only include lowercase letters, numbers, underscores.",
                "create": "Create",
                "cancel": "Cancel",
                "delete.confirm": "Do you want to delete this database?",
                "sql": "SQL Query",
                "search": "Search Database",
                "nopermission": "No permission",
                "notSupport": "Not Support Yet"
            }
        }
    },
    "thumbnails": "platform/6c8905d2-2c32-4374-9620-21da20d91054/thumbnails/bce49c27-b934-412e-b801-5ddbf8514e65.png",
    "tags": [
        "集群概览"
    ],
    "description": null,
    "platformUuid": "6c8905d2-2c32-4374-9620-21da20d91054",
    "type": "page",
    "createdAt": "2024-01-24T08:45:33.830Z",
    "updatedAt": "2024-10-24T03:28:31.921Z"
}